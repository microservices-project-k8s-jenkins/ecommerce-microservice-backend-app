name: Deploy Microservices to AWS EKS with ArgoCD

on:
  workflow_dispatch:

permissions:
  contents: read
  packages: read
  actions: write
  repository-projects: write

env:
  AWS_REGION: ${{ secrets.TF_REGION }}
  TAG: ${{ github.run_number }}
  ECR_REGISTRY: ${{ secrets.TF_ECR_NAME }}

jobs:
  build-and-push:
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout repo
      uses: actions/checkout@v4

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Build with Maven
      run: ./mvnw clean package

    - name: Create ECR repositories if they don't exist
      run: |
        services=(
          cloud-config
          service-discovery
          api-gateway
          proxy-client
          order-service
          payment-service
          product-service
          shipping-service
          user-service
          favourite-service
        )

        for service in "${services[@]}"; do
          echo "Creating ECR repository for $service if it doesn't exist"
          aws ecr describe-repositories --repository-names $service --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws ecr create-repository --repository-name $service --region ${{ env.AWS_REGION }}
        done

    - name: Build and Push Docker Images
      run: |
        services=(
          cloud-config
          service-discovery
          api-gateway
          proxy-client
          order-service
          payment-service
          product-service
          shipping-service
          user-service
          favourite-service
        )

        for service in "${services[@]}"; do
          echo "Building and pushing $service"
          docker build -t $ECR_REGISTRY/$service:$TAG $service
          docker tag $ECR_REGISTRY/$service:$TAG $ECR_REGISTRY/$service:latest
          docker push $ECR_REGISTRY/$service:$TAG
          docker push $ECR_REGISTRY/$service:latest
        done

  trigger-chart-update:
    needs: build-and-push
    runs-on: ubuntu-22.04
    
    steps:
    - name: Trigger chart repository update
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.CHARTS_REPO_TOKEN }}
        script: |
          const branch = '${{ github.ref_name }}';
          const tag = '${{ env.TAG }}';
          
          await github.rest.repos.createDispatchEvent({
            owner: 'microservices-project-k8s-jenkins',
            repo: 'ecommerce-chart',
            event_type: 'update-image-tags',
            client_payload: {
              branch: branch,
              tag: tag,
              services: [
                'cloud-config',
                'service-discovery',
                'api-gateway',
                'proxy-client',
                'order-service',
                'payment-service',
                'product-service',
                'shipping-service',
                'user-service',
                'favourite-service'
              ]
            }
          });
          
          console.log(`Triggered chart update for branch ${branch} with tag ${tag}`);

    - name: Generate Release Notes
      run: |
        git log -n 20 --pretty=format:"* %s (%an)" > release-notes.md
        cat release-notes.md

    - name: Upload Release Notes
      if: success() && hashFiles('release-notes.md') != ''
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ env.TAG }}
        path: release-notes.md

    - name: Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Tag:** ${{ env.TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Registry:** ${{ env.ECR_REGISTRY }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Updated Repository:** microservices-project-k8s-jenkins/ecommerce-chart" >> $GITHUB_STEP_SUMMARY
        echo "- **ArgoCD will automatically sync the changes**" >> $GITHUB_STEP_SUMMARY
