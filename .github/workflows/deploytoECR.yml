name: Deploy on PR Merge and Trigger Chart Update

on:
  pull_request:
    types:
      - closed # Se dispara cuando un PR se cierra
    branches:
      - master # O main, tu rama principal de producción
      - stage
      - dev
  workflow_dispatch: # Permite disparo manual
    inputs:
      simulated_pr_title:
        description: 'Simulated PR Title (e.g., "Release v1.2.3" or "Feature v0.5.0")'
        required: true
        type: string
      simulated_target_branch:
        description: 'Simulated Target Branch (master, stage, or dev)'
        required: true
        type: choice
        options:
          - dev
          - stage
          - master # Asegúrate que coincida con tus nombres de rama (master o main)
        default: 'master'

permissions:
  contents: read    # Para hacer checkout del repo
  id-token: write   # Requerido por aws-actions/configure-aws-credentials si usas OIDC
  pull-requests: read # Para leer el título del PR

env:
  AWS_REGION: ${{ secrets.TF_REGION }}
  # ECR_REPOSITORY_NAME ya no es global, se define por servicio

jobs:
  build-push-and-trigger-on-merge:
    runs-on: ubuntu-22.04
    # Condición crucial: solo correr si el PR fue fusionado (merged)
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
    - name: Checkout Microservices Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 20 # Para 'git log' en las notas de release

    - name: Extract Version and Determine Environment
      id: set-env-details
      run: |
        PR_TITLE="${{ github.event.pull_request.title }}"
        echo "Pull Request Title: $PR_TITLE"
        
        # Extraer version semántica (e.g., v1.2.3 o 1.2.3) del título del PR
        # Esta regex busca "v" opcional, seguido de X.Y.Z
        IMAGE_VERSION_FROM_PR=$(echo "$PR_TITLE" | sed -n 's/.*\b\(v\?[0-9]\+\.[0-9]\+\.[0-9]\+\)\b.*/\1/p')
        
        if [ -z "$IMAGE_VERSION_FROM_PR" ]; then
          echo "::error::Could not extract semantic version (e.g., v1.2.3 or 1.2.3) from PR title: '$PR_TITLE'."
          exit 1
        fi
        echo "Extracted Image Version: $IMAGE_VERSION_FROM_PR"

        # La rama efectiva es la rama base a la que se fusionó el PR
        EFFECTIVE_BRANCH_NAME="${{ github.base_ref }}"
        echo "Effective branch (PR base_ref): $EFFECTIVE_BRANCH_NAME"
        
        TARGET_VALUES_FILE=""
        ENVIRONMENT_NAME="" # dev, stage, prod

        if [[ "$EFFECTIVE_BRANCH_NAME" == "main" || "$EFFECTIVE_BRANCH_NAME" == "master" ]]; then
          TARGET_VALUES_FILE="values-master.yaml"
          ENVIRONMENT_NAME="prod" # Usar 'prod' para ECR repo name si la rama es master/main
        elif [[ "$EFFECTIVE_BRANCH_NAME" == "stage" ]]; then
          TARGET_VALUES_FILE="values-stage.yaml"
          ENVIRONMENT_NAME="stage"
        elif [[ "$EFFECTIVE_BRANCH_NAME" == "dev" ]]; then
          TARGET_VALUES_FILE="values-dev.yaml"
          ENVIRONMENT_NAME="dev"
        else
          echo "::error::PR merged to unhandled base branch '$EFFECTIVE_BRANCH_NAME'. Exiting."
          exit 1
        fi
        
        echo "TARGET_VALUES_FILE_ENV=$TARGET_VALUES_FILE" >> $GITHUB_ENV
        echo "IMAGE_VERSION_ENV=$IMAGE_VERSION_FROM_PR" >> $GITHUB_ENV
        echo "EFFECTIVE_BRANCH_NAME_ENV=$EFFECTIVE_BRANCH_NAME" >> $GITHUB_ENV # Rama real para lógica
        echo "ENVIRONMENT_NAME_ENV=$ENVIRONMENT_NAME" >> $GITHUB_ENV # Para nombre de repo ECR

        echo "Target values file: $TARGET_VALUES_FILE"
        echo "Image Version for ECR Tag: $IMAGE_VERSION_FROM_PR"
        echo "Environment for ECR Repo: $ENVIRONMENT_NAME"
        echo "Effective Branch for chart values logic: $EFFECTIVE_BRANCH_NAME"

    - name: Set up AWS credentials
      id: aws-creds
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ env.AWS_REGION }}
        mask-aws-account-id: 'no'

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Determine Base ECR Registry URI
      id: set-ecr-base-uri
      run: |
        ECR_URI_FROM_LOGIN="${{ steps.login-ecr.outputs.registry }}"
        AWS_ACCOUNT_ID_CLI=$(aws sts get-caller-identity --query Account --output text 2>/dev/null || echo "AWS_CLI_FAILED")
        AWS_REGION_ENV="${{ env.AWS_REGION }}"
        FINAL_ECR_BASE_URI=""

        if [ -n "$ECR_URI_FROM_LOGIN" ]; then
          FINAL_ECR_BASE_URI="$ECR_URI_FROM_LOGIN"
        elif [ -n "$AWS_ACCOUNT_ID_CLI" ] && [ "$AWS_ACCOUNT_ID_CLI" != "None" ] && [ "$AWS_ACCOUNT_ID_CLI" != "AWS_CLI_FAILED" ] && [ -n "$AWS_REGION_ENV" ]; then
          FINAL_ECR_BASE_URI="${AWS_ACCOUNT_ID_CLI}.dkr.ecr.${AWS_REGION_ENV}.amazonaws.com"
        else
          echo "::error::Could not determine Base ECR Registry URI."
          exit 1
        fi
        echo "ECR_BASE_REGISTRY_URI_ENV=$FINAL_ECR_BASE_URI" >> $GITHUB_ENV

    - name: DEBUG - ECR URIs
      run: |
        echo "Base ECR Registry URI from GITHUB_ENV: ${{ env.ECR_BASE_REGISTRY_URI_ENV }}"
        echo "Target Environment for ECR repos: ${{ env.ENVIRONMENT_NAME_ENV }}"
        echo "Image Version for ECR tags: ${{ env.IMAGE_VERSION_ENV }}"

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with: 
        distribution: 'temurin' 
        java-version: '17'

    - name: Build with Maven
      run: ./mvnw clean package -DskipTests

    - name: Build, Tag, and Push Docker Images (Per Service ECR Repo)
      env:
        BASE_ECR_URI: ${{ env.ECR_BASE_REGISTRY_URI_ENV }}
        ENV_NAME: ${{ env.ENVIRONMENT_NAME_ENV }} # e.g., dev, stage, prod
        IMAGE_TAG: ${{ env.IMAGE_VERSION_ENV }}    # e.g., v1.3.4
      run: |
        if [ -z "$BASE_ECR_URI" ] || [ -z "$ENV_NAME" ] || [ -z "$IMAGE_TAG" ]; then
          echo "::error::Critical environment variables for ECR push are missing."
          exit 1
        fi
        services=( cloud-config service-discovery api-gateway proxy-client order-service payment-service product-service shipping-service user-service favourite-service )
        
        for service_name in "${services[@]}"; do
          # ECR Repo name: serviceName-environmentName (e.g., cloud-config-dev)
          ECR_REPO_NAME_FOR_SERVICE="${service_name}-${ENV_NAME}"
          echo "Processing service: $service_name for ECR repo: $ECR_REPO_NAME_FOR_SERVICE"

          CONTEXT_PATH="./${service_name}"; DOCKERFILE_PATH="${CONTEXT_PATH}/Dockerfile"
          if [ ! -f "$DOCKERFILE_PATH" ]; then echo "::warning::Dockerfile $DOCKERFILE_PATH not found for $service_name. Skipping."; continue; fi

          # Create ECR repository for the service if it doesn't exist
          echo "Checking/Creating ECR repository: $ECR_REPO_NAME_FOR_SERVICE"
          aws ecr describe-repositories --repository-names "$ECR_REPO_NAME_FOR_SERVICE" --region "${{ env.AWS_REGION }}" > /dev/null 2>&1 || \
          aws ecr create-repository \
            --repository-name "$ECR_REPO_NAME_FOR_SERVICE" \
            --region "${{ env.AWS_REGION }}" \
            --image-tag-mutability MUTABLE \
            --image-scanning-configuration scanOnPush=true
          
          # Full image path with version tag: BASE_ECR_URI/serviceName-envName:versionTag
          IMAGE_PATH_VERSIONED="$BASE_ECR_URI/$ECR_REPO_NAME_FOR_SERVICE:$IMAGE_TAG"
          # Full image path with latest tag: BASE_ECR_URI/serviceName-envName:latest
          IMAGE_PATH_LATEST="$BASE_ECR_URI/$ECR_REPO_NAME_FOR_SERVICE:latest" 
          # Consider if 'latest' should be environment-specific, e.g. latest-dev, latest-stage
          
          echo "Building image: $IMAGE_PATH_VERSIONED"
          docker build -t "$IMAGE_PATH_VERSIONED" -f "$DOCKERFILE_PATH" "$CONTEXT_PATH"
          echo "Tagging as latest: $IMAGE_PATH_LATEST"
          docker tag "$IMAGE_PATH_VERSIONED" "$IMAGE_PATH_LATEST"
          
          echo "Pushing: $IMAGE_PATH_VERSIONED"
          docker push "$IMAGE_PATH_VERSIONED"
          echo "Pushing: $IMAGE_PATH_LATEST"
          docker push "$IMAGE_PATH_LATEST"
          echo "Finished processing $service_name."
        done

    - name: Trigger chart repository update
      env:
        SCRIPT_ECR_BASE_REGISTRY_URI: ${{ env.ECR_BASE_REGISTRY_URI_ENV }}
        SCRIPT_TARGET_VALUES_FILE: ${{ env.TARGET_VALUES_FILE_ENV }}
        SCRIPT_EFFECTIVE_BRANCH_NAME: ${{ env.EFFECTIVE_BRANCH_NAME_ENV }} # La rama a la que se hizo merge
        SCRIPT_ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME_ENV }} # dev, stage, prod
        SCRIPT_IMAGE_VERSION: ${{ env.IMAGE_VERSION_ENV }} # e.g., v1.3.4
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.CHARTS_REPO_TOKEN }}
        script: |
          const effective_branch_name = process.env.SCRIPT_EFFECTIVE_BRANCH_NAME;
          const image_version = process.env.SCRIPT_IMAGE_VERSION;
          const ecr_base_registry_uri = process.env.SCRIPT_ECR_BASE_REGISTRY_URI;
          const target_values_file_in_chart = process.env.SCRIPT_TARGET_VALUES_FILE;
          const environment_name_for_ecr = process.env.SCRIPT_ENVIRONMENT_NAME;

          console.log(`Dispatching Event Details:
            Effective Branch (PR Merged Into): ${effective_branch_name}
            Image Version (Tag for ECR): ${image_version}
            Base ECR Registry URI: ${ecr_base_registry_uri}
            Target Values File in Chart: ${target_values_file_in_chart}
            Environment Name for ECR Repos: ${environment_name_for_ecr}`);

          if (!ecr_base_registry_uri || !target_values_file_in_chart || !image_version || !environment_name_for_ecr) {
            core.setFailed('Critical Error: Key details for dispatch are empty. Cannot dispatch.');
            return;
          }
          const services_to_update = ['cloud-config', 'service-discovery', 'api-gateway', 'proxy-client', 'order-service', 'payment-service', 'product-service', 'shipping-service', 'user-service', 'favourite-service'];
          
          await github.rest.repos.createDispatchEvent({
            owner: 'microservices-project-k8s-jenkins', repo: 'ecommerce-chart', event_type: 'update-image-tags',
            client_payload: {
              effective_branch: effective_branch_name, 
              image_version_tag: image_version, 
              ecr_base_uri: ecr_base_registry_uri, 
              services_to_update: services_to_update,
              target_values_file: target_values_file_in_chart,
              environment_name: environment_name_for_ecr // e.g. dev, stage, prod
            }
          });
          console.log(`Successfully triggered chart update for ${target_values_file_in_chart} using image version ${image_version}.`);

    - name: Generate Release Notes from PR
      env:
        NOTES_IMAGE_VERSION: ${{ env.IMAGE_VERSION_ENV }}
      run: |
        # Usar el cuerpo del PR o el título para notas de release simples
        echo "Release Notes for Version: ${NOTES_IMAGE_VERSION}" > release-notes-${NOTES_IMAGE_VERSION}.md
        echo "PR Title: ${{ github.event.pull_request.title }}" >> release-notes-${NOTES_IMAGE_VERSION}.md
        echo "PR URL: ${{ github.event.pull_request.html_url }}" >> release-notes-${NOTES_IMAGE_VERSION}.md
        echo "Merged by: ${{ github.event.pull_request.merged_by.login }}" >> release-notes-${NOTES_IMAGE_VERSION}.md
        echo "---" >> release-notes-${NOTES_IMAGE_VERSION}.md
        echo "${{ github.event.pull_request.body }}" >> release-notes-${NOTES_IMAGE_VERSION}.md
        cat release-notes-${NOTES_IMAGE_VERSION}.md

    - name: Upload Release Notes
      if: success()
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ env.IMAGE_VERSION_ENV }}
        path: release-notes-${{ env.IMAGE_VERSION_ENV }}.md

    - name: Deployment Summary
      env:
        SUMMARY_ECR_BASE_URI: ${{ env.ECR_BASE_REGISTRY_URI_ENV }}
        SUMMARY_IMAGE_VERSION: ${{ env.IMAGE_VERSION_ENV }}
        SUMMARY_TARGET_VALUES_FILE: ${{ env.TARGET_VALUES_FILE_ENV }}
        SUMMARY_EFFECTIVE_BRANCH: ${{ env.EFFECTIVE_BRANCH_NAME_ENV }}
        SUMMARY_ENVIRONMENT_NAME: ${{ env.ENVIRONMENT_NAME_ENV }}
      run: |
        echo "## Deployment Summary for PR Merge to: ${SUMMARY_EFFECTIVE_BRANCH}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Environment:** ${SUMMARY_ENVIRONMENT_NAME}" >> $GITHUB_STEP_SUMMARY
        echo "- **Target Values File Updated in Chart:** ${SUMMARY_TARGET_VALUES_FILE}" >> $GITHUB_STEP_SUMMARY
        echo "- **Image Version Pushed to ECR:** ${SUMMARY_IMAGE_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "- **Base ECR Registry URI:** ${SUMMARY_ECR_BASE_URI}" >> $GITHUB_STEP_SUMMARY
        echo "- **ECR Repositories (Pattern):** serviceName-${SUMMARY_ENVIRONMENT_NAME}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Update Event Dispatched To:** microservices-project-k8s-jenkins/ecommerce-chart" >> $GITHUB_STEP_SUMMARY
