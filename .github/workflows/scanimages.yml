name: CI - Build and Scan Docker Images on PR to dev

on:
  pull_request:
    types: [opened, synchronize]
    branches:
      - dev
  workflow_dispatch:

permissions:
  contents: read
  security-events: write

jobs:
  build-and-scan:
    name: Build & Scan Images with Trivy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      - name: Build application JARs with Maven
        run: ./mvnw clean package -DskipTests

      - name: Install Trivy
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v${{ env.TRIVY_VERSION }}
          trivy --version

      - name: Build and Scan Images in a Loop
        run: |
          OVERALL_EXIT_CODE=0
          
          services=( cloud-config service-discovery api-gateway proxy-client order-service payment-service product-service shipping-service user-service favourite-service )
          mkdir -p trivy-results

          for service_name in "${services[@]}"; do
            CONTEXT_PATH="./${service_name}"
            DOCKERFILE_PATH="${CONTEXT_PATH}/Dockerfile"
            
            echo "--------------------------------------------------"
            echo "Processing service: $service_name"
            echo "--------------------------------------------------"

            if [ ! -f "$DOCKERFILE_PATH" ]; then
              echo "::warning::Dockerfile not found for $service_name at $DOCKERFILE_PATH. Skipping."
              continue
            fi

            PR_NUMBER="${{ github.event.pull_request.number }}"
            TAG="pr-${PR_NUMBER:-manual}"
            IMAGE_NAME="local-scan/${service_name}:${TAG}"
          
            echo "Building image: $IMAGE_NAME"
            docker build -t "$IMAGE_NAME" -f "$DOCKERFILE_PATH" "$CONTEXT_PATH"
            
            echo "Scanning image: $IMAGE_NAME"
            
            if ! trivy image \
              --exit-code 1 \
              --scanners vuln \
              --severity HIGH,CRITICAL \
              --format sarif \
              --output "trivy-results/${service_name}.sarif" \
              --ignore-unfixed \
              "$IMAGE_NAME"; then
              
              echo "::error::Trivy found critical vulnerabilities in $service_name. The build will be marked as failed."
              OVERALL_EXIT_CODE=1
            else
              echo "Scan for $service_name completed successfully. No critical issues found."
            fi
          done

          exit $OVERALL_EXIT_CODE

      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results
